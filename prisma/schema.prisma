// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Camper {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  email      String? @unique
  camperCode String? @unique
  firebaseId String? @unique
  citizenId  String? @unique

  firstName   String?
  firstNameEn String?
  lastName    String?
  lastNameEn  String?
  nickname    String?
  telephone   String?
  branch      BranchType?
  coins       Int         @default(0)

  province        String?
  shirtSize       String?
  educationLevel  String?
  educationSchool String?

  emergencyFirstName    String?
  emergencyLastName     String?
  emergencyTelephone    String?
  emergencyRelationship String?

  parentFirstName    String?
  parentLastName     String?
  parentTelephone    String?
  parentRelationship String?

  healthAllergicDrug       String?
  healthAllergicThing      String?
  healthCongenitalDisease  String?
  healthDietaryRestriction String?
  healthDrug               String?

  Team                Team?                 @relation(fields: [teamId], references: [id])
  teamId              String?               @db.Uuid
  discordAccounts     DiscordAccount[]
  CoreQuestion        CoreQuestion[]
  ProgrammingQuestion ProgrammingQuestion[]
  ContentQuestion     ContentQuestion[]
  DesignQuestion      DesignQuestion[]
  MarketingQuestion   MarketingQuestion[]
}

model DiscordAccount {
  discordId String @id
  camperId  String @db.Uuid
  Camper    Camper @relation(fields: [camperId], references: [id])
}

model Team {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  campers Camper[]
}

model CoreQuestion {
  camper   Camper @relation(fields: [camperId], references: [id])
  camperId String @id @db.Uuid

  question1 String?
  question2 String?
  question3 String?
  question4 String?
}

model ProgrammingQuestion {
  camper   Camper @relation(fields: [camperId], references: [id])
  camperId String @id @db.Uuid

  question1 String?
  question2 String?
}

model ContentQuestion {
  camper   Camper @relation(fields: [camperId], references: [id])
  camperId String @id @db.Uuid

  question1 String?
  question2 String?
  question3 String?
}

model DesignQuestion {
  camper   Camper @relation(fields: [camperId], references: [id])
  camperId String @id @db.Uuid

  question1 String?
  question2 String?
  question3 String?
}

model MarketingQuestion {
  camper   Camper @relation(fields: [camperId], references: [id])
  camperId String @id @db.Uuid

  question1 String?
  question2 String?
  question3 String?
  question4 String?
}

model GuildMetadata {
  guildId   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  loggingChannel String?
  roles          GuildRole[]
}

model GuildRole {
  guildId String
  roleKey String

  roleId String
  guild  GuildMetadata @relation(fields: [guildId], references: [guildId])
  @@id([guildId, roleKey])
}

enum BranchType {
  PROGRAMMING
  MARKETING
  CONTENT
  DESIGN
}
